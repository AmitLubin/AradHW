pipeline {
    agent any

    environment {
        CHANGE = false
    }

    parameters {
        string(name: 'TAG', defaultValue: 'latest', description: 'Nginx tag')
        string(name: 'CHART_NAME', defaultValue: 'custom', description: 'The deployment name is needed to retrieve the current docker image used')
        string(name: 'NAMESPACE', defaultValue: 'amit', description: 'Cluster namespace')
    }

    stages {
        stage ('Echo msg') {
            steps {
                echo "hi, I'm gonna update your nginx image"
                sh "kubectl get nodes"
            }
        }

        stage ('Is tag exist?') {
            steps {
                script {
                    def imageName = sh (
                        script: "kubectl get deployment nginx-${CHART_NAME}-deployment -n ${NAMESPACE} -o jsonpath='{.spec.template.spec.containers[0].image}' | awk -F ':' '{print \$1}'",
                        returnStdout: true
                    ).trim()

                    echo "$imageName"
                }
            }
        }

        stage ('Check docker image') {
            steps {
                script {
                    def currentTag = sh(
                        script: "kubectl get deployment nginx-${CHART_NAME}-deployment -n ${NAMESPACE} -o jsonpath='{.spec.template.spec.containers[0].image}' | awk -F ':' '{print \$2}'",
                        returnStdout: true
                    ).trim()

                    echo "$currentTag"

                    if (params.TAG != currentTag) { 
                        CHANGE = true 
                    }
                }
            }
        }

        stage ('Upgrade chart') {
            when {
                expression { 
                    return CHANGE == true
                }
            } 
            steps {
                sh """
                    cd ./k8s/nginx-custom/
                    helm upgrade --install ${CHART_NAME} ./nginx-custom/ -f values.yaml --set tag=${TAG} -n ${NAMESPACE}
                """
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}