pipeline {
    agent any

    parameters {
        booleanParam(name: "CONFIGURE_AWS", defaultValue: true, description: "If true, it will take the access/secret keys from vault and configure AWS")
        string(name: "INSTANCE_IP", description: "Your EC2 instance IP address should be inserted here")
    }

    environment {
        VAULT_ADDR = 'vault:8200'
        VAULT_TOKEN = 'root'
        REGION = 'il-central-1'
        ACCESS_KEY = ''
        SECRET_KEY = ''
        HOSTED_ZONE = ''
    }

    stages {
        stage ('Pre-start'){
            steps {
                echo "This job will take the AWS access and secret keys"
                echo "The keys will be used to configure AWS along with more values"
                echo "The end goal is changing route53 ip address of my domain amit.aws.cts.care."
            }
        }

        stage ('Obtain keys'){
            when {
                expression { params.CONFIGURE_AWS }
            }
            steps {
                script {
                    def res = sh(script: "curl -s --header 'X-Vault-Token: ${VAULT_TOKEN}' ${VAULT_ADDR}/v1/secret/data/aws/key", returnStdout: true).trim()
                    
                    ACCESS_KEY = sh(script: "set +x; echo '$res' | jq -r '.data.data.access_key'", returnStdout: true).trim()
                    SECRET_KEY = sh(script: "set +x; echo '$res' | jq -r '.data.data.secret_key'", returnStdout: true).trim()
                }
            }
        }

        stage ('Configure AWS'){
            when {
                expression { params.CONFIGURE_AWS }
            }
            steps {
                sh """
                    aws configure set aws_access_key_id ${ACCESS_KEY}
                    aws configure set aws_secret_access_key ${SECRET_KEY}
                    aws configure set region ${REGION}
                    aws sts get-caller-identity
                """
            }
        }

        stage ('Get hosted zone'){
            steps {
                script {
                    HOSTED_ZONE = sh(script: "aws route53 list-hosted-zones | grep -C 1 aws.cts.care. | head -n 1 | awk -F '/' '{print \$3}' | awk -F '\"' '{print \$1}'", returnStdout: true).trim()
                    // echo "Hosted zone id: $HOSTED_ZONE"
                }
            }
        }

        stage ('Make new json with requested IP'){
            steps {
                script {
                    echo "Generating new json"
                    sh "ls aws/route53"
                    sh "jq --arg ip \"${params.INSTANCE_IP}\" '.Changes[0].ResourceRecordSet.ResourceRecords[0].Value = \$ip' aws/route53/change-route53.json > aws/route53/tmp.json"
                }
            }
        }

        stage ('Execute json file for changes in route 53'){
            steps {
                echo "Applying record changes"
                sh """
                    aws route53 change-resource-record-sets \
                    --hosted-zone-id ${HOSTED_ZONE} \
                    --change-batch file://aws/route53/tmp.json
                """
            }
        }

        

        // Last stage

        stage ('Clean workspace'){
            steps {
                echo "Cleaning workspace"
                cleanWs()
            }
        }
    }
}